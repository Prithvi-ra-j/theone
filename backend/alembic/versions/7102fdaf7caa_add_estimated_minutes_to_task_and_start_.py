"""add estimated_minutes to Task and start_time to CalendarEvent

Revision ID: 7102fdaf7caa
Revises: make_career_category_nullable
Create Date: 2025-09-20 20:19:07.559981

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7102fdaf7caa'
down_revision = 'make_career_category_nullable'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('achievement', sa.Column('name', sa.String(length=255), nullable=False, server_default=sa.text("''")))
    op.add_column('achievement', sa.Column('target_value', sa.Float(), nullable=False, server_default=sa.text('0')))
    op.add_column('achievement', sa.Column('measurement_unit', sa.String(length=50), nullable=False, server_default=sa.text("''")))
    op.add_column('achievement', sa.Column('points_reward', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('achievement', sa.Column('icon_url', sa.String(length=500), nullable=True))
    op.add_column('achievement', sa.Column('difficulty_level', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('achievement', sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.text('false')))
    op.add_column('achievement', sa.Column('is_repeatable', sa.Boolean(), nullable=False, server_default=sa.text('false')))
    op.add_column('achievement', sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')))
    op.alter_column('achievement', 'description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_unique_constraint(None, 'achievement', ['name'])
    op.drop_constraint('achievement_user_id_fkey', 'achievement', type_='foreignkey')
    op.drop_column('achievement', 'value')
    op.drop_column('achievement', 'user_id')
    op.drop_column('achievement', 'title')
    op.drop_column('achievement', 'rarity_score')
    op.drop_column('achievement', 'difficulty')
    op.drop_column('achievement', 'achieved_at')
    op.drop_column('achievement', 'points_earned')
    op.add_column('badge', sa.Column('badge_type', sa.String(length=50), nullable=False, server_default=sa.text("''")))
    op.add_column('badge', sa.Column('difficulty', sa.String(length=20), nullable=False, server_default=sa.text("''")))
    op.add_column('badge', sa.Column('color', sa.String(length=7), nullable=True))
    op.add_column('badge', sa.Column('requirements', sa.JSON(), nullable=False, server_default=sa.text("'{}'::json")))
    op.add_column('badge', sa.Column('points_value', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('badge', sa.Column('is_secret', sa.Boolean(), nullable=False, server_default=sa.text('false')))
    op.drop_column('badge', 'is_hidden')
    op.drop_column('badge', 'rarity')
    op.drop_column('badge', 'criteria')
    op.drop_column('badge', 'points')
    op.add_column('calendarevent', sa.Column('start_time', sa.Time(), nullable=True))
    op.add_column('conversation', sa.Column('conversation_type', sa.String(length=50), nullable=False, server_default=sa.text("''")))
    op.add_column('conversation', sa.Column('messages', sa.JSON(), nullable=False, server_default=sa.text("'[]'::json")))
    op.add_column('conversation', sa.Column('summary', sa.Text(), nullable=True))
    op.add_column('conversation', sa.Column('context_data', sa.JSON(), nullable=True))
    op.add_column('conversation', sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.text('false')))
    op.add_column('conversation', sa.Column('message_count', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('conversation', sa.Column('started_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')))
    op.add_column('conversation', sa.Column('last_message_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')))
    op.add_column('conversation', sa.Column('ended_at', sa.DateTime(), nullable=True))
    op.drop_column('conversation', 'intent')
    op.drop_column('conversation', 'context')
    op.drop_column('conversation', 'timestamp')
    op.drop_column('conversation', 'message_index')
    op.drop_column('conversation', 'sentiment')
    op.drop_column('conversation', 'processing_time')
    op.drop_column('conversation', 'feedback_notes')
    op.drop_column('conversation', 'confidence')
    op.drop_column('conversation', 'user_rating')
    op.drop_column('conversation', 'model_used')
    op.drop_column('conversation', 'model_version')
    op.drop_column('conversation', 'role')
    op.drop_column('conversation', 'content')
    op.drop_column('conversation', 'message_type')
    op.drop_column('conversation', 'was_helpful')
    op.drop_column('conversation', 'created_at')
    op.add_column('embedding', sa.Column('vector', sa.LargeBinary(), nullable=False, server_default=sa.text("''::bytea")))
    op.add_column('embedding', sa.Column('dimensions', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('embedding', sa.Column('model_name', sa.String(length=100), nullable=False, server_default=sa.text("''")))
    op.add_column('embedding', sa.Column('is_valid', sa.Boolean(), nullable=False, server_default=sa.text('false')))
    op.add_column('embedding', sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')))
    op.create_unique_constraint(None, 'embedding', ['memory_id'])
    op.drop_column('embedding', 'text_content')
    op.drop_column('embedding', 'embedding_vector')
    op.drop_column('embedding', 'embedding_model')
    op.drop_column('embedding', 'embedding_version')
    op.drop_column('embedding', 'embedding_quality')
    op.drop_column('embedding', 'vector_dimension')
    op.execute('ALTER TABLE moodlog ALTER COLUMN activities TYPE JSON USING activities::json')
    op.execute('ALTER TABLE moodlog ALTER COLUMN triggers TYPE JSON USING triggers::json')
    op.alter_column('moodlog', 'entry_method',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               existing_nullable=False)
    op.alter_column('moodlog', 'is_private',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_column('moodlog', 'motivation_level')
    op.drop_column('moodlog', 'confidence_level')
    op.drop_column('moodlog', 'mood_label')
    op.drop_column('moodlog', 'productivity_rating')
    op.drop_column('moodlog', 'water_intake')
    op.drop_column('moodlog', 'goals_completed')
    op.add_column('task', sa.Column('estimated_minutes', sa.Integer(), nullable=True))
    op.add_column('userbadge', sa.Column('earned_date', sa.Date(), nullable=False, server_default=sa.text('CURRENT_DATE')))
    op.add_column('userbadge', sa.Column('trigger_event', sa.String(length=255), nullable=True))
    op.add_column('userbadge', sa.Column('progress_snapshot', sa.JSON(), nullable=True))
    op.add_column('userbadge', sa.Column('is_displayed', sa.Boolean(), nullable=False, server_default=sa.text('false')))
    op.add_column('userbadge', sa.Column('display_order', sa.Integer(), nullable=True))
    op.add_column('userbadge', sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')))
    op.drop_column('userbadge', 'progress_value')
    op.drop_column('userbadge', 'is_notified')
    op.add_column('usermemory', sa.Column('content', sa.Text(), nullable=False, server_default=sa.text("''")))
    op.add_column('usermemory', sa.Column('category', sa.String(length=100), nullable=True))
    op.add_column('usermemory', sa.Column('related_entity_type', sa.String(length=50), nullable=True))
    op.add_column('usermemory', sa.Column('related_entity_id', sa.Integer(), nullable=True))
    op.alter_column('usermemory', 'source',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               nullable=True)
    op.drop_column('usermemory', 'value')
    op.drop_column('usermemory', 'context')
    op.drop_column('usermemory', 'summary')
    op.drop_column('usermemory', 'tags')
    op.drop_column('usermemory', 'expires_at')
    op.drop_column('usermemory', 'key')
    op.add_column('userstats', sa.Column('total_points', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('current_level', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('points_to_next_level', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('current_habit_streak', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('total_habits_completed', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('total_tasks_completed', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('total_mood_logs', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('total_expenses_logged', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('achievements_completed', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('days_active', sa.Integer(), nullable=False, server_default=sa.text('0')))
    op.add_column('userstats', sa.Column('last_activity_date', sa.Date(), nullable=True))
    op.add_column('userstats', sa.Column('weekly_points', sa.Integer(), nullable=False))
    op.add_column('userstats', sa.Column('monthly_points', sa.Integer(), nullable=False))
    op.add_column('userstats', sa.Column('weekly_reset_date', sa.Date(), nullable=True))
    op.add_column('userstats', sa.Column('monthly_reset_date', sa.Date(), nullable=True))
    op.drop_column('userstats', 'wellness_streak')
    op.drop_column('userstats', 'next_level_xp')
    op.drop_column('userstats', 'last_activity')
    op.drop_column('userstats', 'total_expenses_tracked')
    op.drop_column('userstats', 'budgets_maintained')
    op.drop_column('userstats', 'total_app_sessions')
    op.drop_column('userstats', 'total_xp')
    op.drop_column('userstats', 'learning_hours')
    op.drop_column('userstats', 'habits_completed')
    op.drop_column('userstats', 'achievements_unlocked')
    op.drop_column('userstats', 'skills_learned')
    op.drop_column('userstats', 'career_goals_completed')
    op.drop_column('userstats', 'average_mood_score')
    op.drop_column('userstats', 'total_habit_days')
    op.drop_column('userstats', 'savings_goals_achieved')
    op.drop_column('userstats', 'mood_logs_count')
    op.drop_column('userstats', 'level')
    op.drop_column('userstats', 'current_level_xp')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('userstats', sa.Column('current_level_xp', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('mood_logs_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('savings_goals_achieved', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('total_habit_days', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('average_mood_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('career_goals_completed', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('skills_learned', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('achievements_unlocked', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('habits_completed', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('learning_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('total_xp', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('total_app_sessions', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('budgets_maintained', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('total_expenses_tracked', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('next_level_xp', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('userstats', sa.Column('wellness_streak', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_column('userstats', 'monthly_reset_date')
    op.drop_column('userstats', 'weekly_reset_date')
    op.drop_column('userstats', 'monthly_points')
    op.drop_column('userstats', 'weekly_points')
    op.drop_column('userstats', 'last_activity_date')
    op.drop_column('userstats', 'days_active')
    op.drop_column('userstats', 'achievements_completed')
    op.drop_column('userstats', 'total_expenses_logged')
    op.drop_column('userstats', 'total_mood_logs')
    op.drop_column('userstats', 'total_tasks_completed')
    op.drop_column('userstats', 'total_habits_completed')
    op.drop_column('userstats', 'current_habit_streak')
    op.drop_column('userstats', 'points_to_next_level')
    op.drop_column('userstats', 'current_level')
    op.drop_column('userstats', 'total_points')
    op.add_column('usermemory', sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('usermemory', sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('usermemory', sa.Column('tags', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('usermemory', sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('usermemory', sa.Column('context', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('usermemory', sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False))
    op.alter_column('usermemory', 'source',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('usermemory', 'related_entity_id')
    op.drop_column('usermemory', 'related_entity_type')
    op.drop_column('usermemory', 'category')
    op.drop_column('usermemory', 'content')
    op.add_column('userbadge', sa.Column('is_notified', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('userbadge', sa.Column('progress_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_column('userbadge', 'created_at')
    op.drop_column('userbadge', 'display_order')
    op.drop_column('userbadge', 'is_displayed')
    op.drop_column('userbadge', 'progress_snapshot')
    op.drop_column('userbadge', 'trigger_event')
    op.drop_column('userbadge', 'earned_date')
    op.drop_column('task', 'estimated_minutes')
    op.add_column('moodlog', sa.Column('goals_completed', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('moodlog', sa.Column('water_intake', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('moodlog', sa.Column('productivity_rating', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('moodlog', sa.Column('mood_label', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('moodlog', sa.Column('confidence_level', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('moodlog', sa.Column('motivation_level', sa.INTEGER(), autoincrement=False, nullable=True))
    op.alter_column('moodlog', 'is_private',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('moodlog', 'entry_method',
               existing_type=sa.VARCHAR(length=20),
               server_default=sa.text("'manual'::character varying"),
               existing_nullable=False)
    op.alter_column('moodlog', 'triggers',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('moodlog', 'activities',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.add_column('embedding', sa.Column('vector_dimension', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('embedding', sa.Column('embedding_quality', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('embedding', sa.Column('embedding_version', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('embedding', sa.Column('embedding_model', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('embedding', sa.Column('embedding_vector', postgresql.BYTEA(), autoincrement=False, nullable=False))
    op.add_column('embedding', sa.Column('text_content', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'embedding', type_='unique')
    op.drop_column('embedding', 'updated_at')
    op.drop_column('embedding', 'is_valid')
    op.drop_column('embedding', 'model_name')
    op.drop_column('embedding', 'dimensions')
    op.drop_column('embedding', 'vector')
    op.add_column('conversation', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('conversation', sa.Column('was_helpful', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('message_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('conversation', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('conversation', sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('conversation', sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('model_used', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('user_rating', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('feedback_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('sentiment', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('message_index', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('conversation', sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('conversation', sa.Column('context', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('conversation', sa.Column('intent', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_column('conversation', 'ended_at')
    op.drop_column('conversation', 'last_message_at')
    op.drop_column('conversation', 'started_at')
    op.drop_column('conversation', 'message_count')
    op.drop_column('conversation', 'is_active')
    op.drop_column('conversation', 'context_data')
    op.drop_column('conversation', 'summary')
    op.drop_column('conversation', 'messages')
    op.drop_column('conversation', 'conversation_type')
    op.drop_column('calendarevent', 'start_time')
    op.add_column('badge', sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('badge', sa.Column('criteria', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('badge', sa.Column('rarity', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('badge', sa.Column('is_hidden', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_column('badge', 'is_secret')
    op.drop_column('badge', 'points_value')
    op.drop_column('badge', 'requirements')
    op.drop_column('badge', 'color')
    op.drop_column('badge', 'difficulty')
    op.drop_column('badge', 'badge_type')
    op.add_column('achievement', sa.Column('points_earned', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('achievement', sa.Column('achieved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('achievement', sa.Column('difficulty', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('achievement', sa.Column('rarity_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('achievement', sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('achievement', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('achievement', sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.create_foreign_key('achievement_user_id_fkey', 'achievement', 'user', ['user_id'], ['id'])
    op.drop_constraint(None, 'achievement', type_='unique')
    op.alter_column('achievement', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_column('achievement', 'updated_at')
    op.drop_column('achievement', 'is_repeatable')
    op.drop_column('achievement', 'is_active')
    op.drop_column('achievement', 'difficulty_level')
    op.drop_column('achievement', 'icon_url')
    op.drop_column('achievement', 'points_reward')
    op.drop_column('achievement', 'measurement_unit')
    op.drop_column('achievement', 'target_value')
    op.drop_column('achievement', 'name')
    # ### end Alembic commands ###