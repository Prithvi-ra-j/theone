name: CI - migrations and tests
name: CI - migrations and tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sqlite-migrations:
    name: SQLite migrations + tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system deps
        run: |
          sudo apt-get update && sudo apt-get install -y libsqlite3-dev libpq-dev

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run alembic migrations (SQLite)
        run: |
          export DATABASE_URL="sqlite:///$(pwd)/.ci_sqlite.db"
          rm -f .ci_sqlite.db || true
          alembic upgrade head

      - name: Run pytest (quick smoke)
        run: |
          pytest -q

  postgres-migrations:
    name: Postgres migrations + tests
    runs-on: ubuntu-latest
    needs: sqlite-migrations
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: theone_test
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break || sleep 1
          done

      - name: Run alembic migrations (Postgres)
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/theone_test
        run: |
          alembic upgrade head

      - name: Run pytest (Postgres)
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/theone_test
        run: |
          pytest -q

  tests:
    name: Unit tests with coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          pytest -q -m "not integration" --disable-warnings --maxfail=5 \
            --cov=app --cov-report=term --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: backend/coverage.xml
          flags: unittests
          fail_ci_if_error: true

  ai-smoke-tests:
    name: AI integration tests
    runs-on: ubuntu-latest
    needs: tests
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Check API_LLM_API_KEY
        run: |
          if [ -z "${{ secrets.API_LLM_API_KEY }}" ]; then
            echo "API_LLM_API_KEY is not set. Skipping AI smoke tests."
            exit 78
          fi

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run AI smoke test
        run: pytest -q -m "integration" --disable-warnings --maxfail=3
